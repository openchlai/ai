#!/bin/bash

echo "🧪 Testing AI Service Workflow Scripts Locally"
echo "=============================================="

# Test 1: Coverage XML Generation
echo ""
echo "Test 1: Testing coverage XML generation..."
cd /Users/mac/ai/ai_service

# Test coverage script
if [ -d tests ] && [ -n "$(find tests -name '*.py' -type f)" ]; then
  echo "✅ Tests directory found with Python files"
  # Simulate the coverage generation without actually running pytest
  printf '<?xml version="1.0"?>\n<coverage version="7.0" timestamp="%s" lines-valid="100" lines-covered="85" line-rate="0.85">\n<sources><source>./app</source></sources>\n<packages></packages>\n</coverage>\n' "$(date +%s)" > coverage.xml.test
  echo "✅ Test coverage.xml created successfully"
else
  echo "❌ No tests found, creating fallback coverage.xml"
  printf '<?xml version="1.0"?>\n<coverage version="7.0" timestamp="%s" lines-valid="100" lines-covered="0" line-rate="0.0">\n<sources><source>./app</source></sources>\n<packages></packages>\n</coverage>\n' "$(date +%s)" > coverage.xml.test
  echo "✅ Fallback coverage.xml created successfully"
fi

# Validate XML
if command -v xmllint >/dev/null 2>&1; then
  if xmllint --noout coverage.xml.test 2>/dev/null; then
    echo "✅ Generated XML is valid"
  else
    echo "❌ Generated XML is invalid"
  fi
else
  echo "⚠️ xmllint not available, skipping XML validation"
fi

echo ""
echo "Test 2: Testing coverage report generation..."

# Simulate environment variables
export GITHUB_REF_NAME="test-branch"
export GITHUB_SHA="abc1234567890"
export GITHUB_REPOSITORY="test-org/test-repo"
export GITHUB_RUN_ID="123456789"

COVERAGE_PERCENTAGE=85
COVERAGE_COLOR="brightgreen"
COVERAGE_DETAILS="Sample coverage report details"

# Test coverage report generation
printf '# 📊 Code Coverage Report - AI Service\n\n**Branch:** %s\n**Commit:** [`%s`](https://github.com/%s/commit/%s)\n**Generated:** %s\n**Python Version:** %s\n**Workflow:** [`%s`](https://github.com/%s/actions/runs/%s)\n\n## 🎯 Coverage Summary\n\n![Coverage](https://img.shields.io/badge/Coverage-%s%%25-%s)\n\n| Metric | Value | Status |\n|--------|-------|--------|\n| **Coverage** | %s%% | %s |\n| **Threshold** | 80%% | Target |\n\n## 📈 Detailed Coverage Report\n\n```\n%s\n```\n\n---\n*Report generated automatically by GitHub Actions*\n' \
  "$GITHUB_REF_NAME" \
  "${GITHUB_SHA:0:7}" \
  "$GITHUB_REPOSITORY" \
  "$GITHUB_SHA" \
  "$(date '+%Y-%m-%d %H:%M:%S UTC')" \
  "3.11" \
  "$GITHUB_RUN_ID" \
  "$GITHUB_REPOSITORY" \
  "$GITHUB_RUN_ID" \
  "$COVERAGE_PERCENTAGE" \
  "$COVERAGE_COLOR" \
  "$COVERAGE_PERCENTAGE" \
  "$([ "$COVERAGE_PERCENTAGE" -ge 80 ] && echo "✅ Pass" || echo "❌ Fail")" \
  "$COVERAGE_DETAILS" > COVERAGE.md.test

if [ -f COVERAGE.md.test ]; then
  echo "✅ Coverage markdown report generated successfully"
  echo "📄 First 10 lines of the report:"
  head -10 COVERAGE.md.test
else
  echo "❌ Failed to generate coverage report"
fi

echo ""
echo "Test 3: Testing HelplineV1 coverage report..."
cd /Users/mac/ai

# Test HelplineV1 report generation
COVERAGE=75
TIMESTAMP="$(date '+%Y-%m-%d %H:%M:%S UTC')"
PHP_VERSION="8.3"

printf '# HelplineV1 Code Coverage Report\n\n**Generated:** %s  \n**PHP Version:** %s  \n**Branch:** %s  \n**Commit:** %s\n\n## Coverage Summary\n\n| Metric | Value |\n|--------|-------|\n| Line Coverage | %s%% |\n| Minimum Threshold | 40%% |\n| Status | %s |\n\n## Test Results\n\n- **PHP Version Tested:** %s\n- **Database:** MySQL 8.0\n- **Test Command:** `./vendor/bin/phpunit --verbose --testdox`\n- **Coverage Tool:** PCOV\n\n## Files and Directories\n\nCoverage analysis includes all PHP files in the REST API backend located in `helplinev1/rest_api/`.\n\n## Additional Reports\n\n- Detailed HTML coverage report available in CI artifacts\n- Clover XML format uploaded to Codecov\n- Full test results archived for 30 days\n\n---\n*This report was automatically generated by GitHub Actions*\n' \
  "$TIMESTAMP" \
  "$PHP_VERSION" \
  "$GITHUB_REF_NAME" \
  "${GITHUB_SHA:0:7}" \
  "$COVERAGE" \
  "$([ "$COVERAGE" -ge "40" ] && echo "✅ PASSING" || echo "❌ FAILING")" \
  "$PHP_VERSION" > helpline-coverage.md.test

if [ -f helpline-coverage.md.test ]; then
  echo "✅ HelplineV1 coverage report generated successfully"
  echo "📄 First 8 lines of the report:"
  head -8 helpline-coverage.md.test
else
  echo "❌ Failed to generate HelplineV1 coverage report"
fi

echo ""
echo "Test 4: Testing deployment report generation..."

# Test deployment report from ai_service/ci-cd.yml
printf '# AI Service Deployment Report\n\n**Build Date:** %s\n**Git SHA:** %s\n**Branch:** %s\n\n## Deployment Status\n- **Staging:** %s\n- **Production:** %s\n\n## Quality Gates\n- Quality gates have been executed during the pipeline\n\n## Next Steps\n- Monitor application performance\n- Review logs for any issues\n- Update documentation if needed\n' \
  "$(date)" \
  "$GITHUB_SHA" \
  "$GITHUB_REF_NAME" \
  "success" \
  "success" > deployment-report.md.test

if [ -f deployment-report.md.test ]; then
  echo "✅ Deployment report generated successfully"
  echo "📄 Contents of the report:"
  cat deployment-report.md.test
else
  echo "❌ Failed to generate deployment report"
fi

echo ""
echo "🎉 All workflow script tests completed!"
echo ""
echo "Generated test files:"
ls -la *.test 2>/dev/null || echo "No test files found"

echo ""
echo "Cleanup test files? (y/n)"
read -r cleanup
if [ "$cleanup" = "y" ]; then
  rm -f *.test
  echo "✅ Test files cleaned up"
else
  echo "ℹ️ Test files preserved for inspection"
fi
