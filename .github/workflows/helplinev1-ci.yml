name: HelplineV1 CI
permissions:
  contents: write
  pull-requests: write

on:
  push:
    paths:
      - 'helplinev1/**'
  pull_request:
    paths:
      - 'helplinev1/**'
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Unit Tests and Code Coverage for REST API Backend
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: helpline_test
          MYSQL_USER: helpline_user
          MYSQL_PASSWORD: helpline_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: üõéÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, hash, json, libxml, openssl, pcre, session, tokenizer, zip, pcov
          tools: composer:v2
          coverage: pcov

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: helplinev1/rest_api/vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('helplinev1/rest_api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-

      - name: Install Composer dependencies
        working-directory: helplinev1/rest_api
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -u root -prootpassword -e "CREATE DATABASE IF NOT EXISTS helpline_test;"
          mysql -h 127.0.0.1 -u root -prootpassword helpline_test < helplinev1/rest_api/config/uchl.sql || echo "Schema file not found, proceeding with tests"

      - name: Run Unit Tests
        working-directory: helplinev1/rest_api
        run: ./vendor/bin/phpunit --verbose --testdox

      - name: üß™ Run Tests with Coverage
        working-directory: helplinev1/rest_api
        run: |
          echo "üõ† Running unit tests with coverage..."
          ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml --coverage-html=coverage-html || {
            echo "‚ö†Ô∏è Tests failed. Creating fallback coverage.xml so downstream steps still run."
            printf '<?xml version="1.0"?>\n<coverage version="6.0" timestamp="1" lines-valid="100" lines-covered="0" line-rate="0.0">\n<sources><source>./</source></sources>\n<packages></packages>\n</coverage>\n' > coverage.xml
          }

      - name: üìä Generate Coverage Report
        working-directory: helplinev1/rest_api
        run: |
          echo "üìä Generating coverage summary..."
          
          # Use original calculation method that was working
          php calculate-coverage.php > coverage-analysis.txt || echo "No detailed coverage analysis available" > coverage-analysis.txt
          COVERAGE=$(php calculate-coverage.php | grep "Estimated Line Coverage" | grep -oE "[0-9]+%" | grep -oE "[0-9]+" 2>/dev/null || echo "0")
          
          echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
          echo "üìä Detected Coverage: ${COVERAGE}%"
          
          # Set coverage color for badge
          if [ "$COVERAGE" -ge "80" ]; then
            echo "COVERAGE_COLOR=brightgreen" >> $GITHUB_ENV
          elif [ "$COVERAGE" -ge "60" ]; then
            echo "COVERAGE_COLOR=yellow" >> $GITHUB_ENV
          elif [ "$COVERAGE" -ge "40" ]; then
            echo "COVERAGE_COLOR=orange" >> $GITHUB_ENV
          else
            echo "COVERAGE_COLOR=red" >> $GITHUB_ENV
          fi
          
          # Generate test summary
          echo "üìä Generating detailed test summary..."
          ./vendor/bin/phpunit --testdox > test-summary.txt 2>&1 || echo "Test summary not available" > test-summary.txt

      - name: üìù Generate COVERAGE.md
        working-directory: helplinev1/rest_api
        run: |
          echo "üìù Writing COVERAGE.md..."
          
          # Get detailed coverage information
          if [ -f coverage-analysis.txt ]; then
            COVERAGE_DETAILS=$(cat coverage-analysis.txt)
          else
            COVERAGE_DETAILS="No detailed coverage data available"
          fi
          
          # Get test summary
          if [ -f test-summary.txt ]; then
            TEST_DETAILS=$(cat test-summary.txt)
          else
            TEST_DETAILS="No test details available"
          fi
          
          printf '# üìä Code Coverage Report - HelplineV1\n\n**Branch:** %s\n**Commit:** [\`%s\`](%s)\n**Generated:** %s\n**PHP Version:** %s\n**Workflow:** [\`%s\`](%s)\n\n## üéØ Coverage Summary\n\n![Coverage](https://img.shields.io/badge/Coverage-%s%%25-%s)\n![Tests](https://img.shields.io/badge/Tests-PHPUnit-blue)\n\n| Metric | Value | Status |\n|--------|-------|--------|\n| **Coverage** | %s%% | %s |\n| **Threshold** | 80%% | Target |\n| **Generated** | %s | |\n| **Branch** | %s | |\n| **PHP Version** | %s | |\n\n## üìà Detailed Coverage Analysis\n\n```\n%s\n```\n\n## üß™ Test Summary\n\n```\n%s\n```\n\n## üìÅ Generated Files\n\n- `coverage.xml` - XML coverage report for CI/CD integration\n- `coverage-html/` - HTML coverage report for detailed browsing\n- `coverage-analysis.txt` - Detailed coverage analysis\n- `test-summary.txt` - Test execution summary\n\n## üîç How to View Coverage\n\n### HTML Report (Recommended)\nOpen `helplinev1/rest_api/coverage-html/index.html` in your browser for an interactive view.\n\n### Command Line\n```bash\ncd helplinev1/rest_api\n./vendor/bin/phpunit --coverage-text\n```\n\n### XML Integration\nUse `coverage.xml` for integration with code coverage services like Codecov.\n\n---\n*Report generated automatically by GitHub Actions*\n*Access this report at: [COVERAGE.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/helplinev1/COVERAGE.md)*\n' \
            "${{ github.ref_name }}" \
            "${GITHUB_SHA:0:7}" \
            "https://github.com/${{ github.repository }}/commit/${{ github.sha }}" \
            "$(date '+%Y-%m-%d %H:%M:%S UTC')" \
            "${{ matrix.php-version }}" \
            "${{ github.run_id }}" \
            "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            "${COVERAGE_PERCENTAGE:-0}" \
            "${COVERAGE_COLOR:-red}" \
            "${COVERAGE_PERCENTAGE:-0}" \
            "$([ "${COVERAGE_PERCENTAGE:-0}" -ge 80 ] && echo "‚úÖ Pass" || echo "‚ùå Fail")" \
            "$(date '+%Y-%m-%d %H:%M:%S UTC')" \
            "${{ github.ref_name }}" \
            "${{ matrix.php-version }}" \
            "${COVERAGE_DETAILS}" \
            "${TEST_DETAILS}" > ../COVERAGE.md

          if [ -f ../COVERAGE.md ]; then
            echo "‚úÖ COVERAGE.md generated successfully at helplinev1/COVERAGE.md"
          else
            echo "‚ùå Failed to write COVERAGE.md"
            exit 1
          fi

          echo "COVERAGE_MD_LINK=https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/helplinev1/COVERAGE.md" >> $GITHUB_ENV

      - name: üíæ Commit COVERAGE.md to PR branch
        if: github.event_name == 'pull_request' && matrix.php-version == '8.3'
        working-directory: helplinev1
        run: |
          echo "üíæ Committing COVERAGE.md to PR branch ${GITHUB_HEAD_REF}..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Ensure we're on the PR's HEAD
          git fetch origin "${GITHUB_HEAD_REF}:${GITHUB_HEAD_REF}" || true
          git checkout "${GITHUB_HEAD_REF}" || true

          git add COVERAGE.md
          git status --porcelain
          git commit -m "üìä Update coverage report [skip ci]" || echo "‚ÑπÔ∏è No changes to commit"
          git push origin HEAD:${GITHUB_HEAD_REF}
          echo "‚úÖ Pushed COVERAGE.md to PR branch."

      - name: Upload Coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          file: ./helplinev1/rest_api/coverage.xml
          flags: helplinev1-backend,php${{ matrix.php-version }}
          name: helplinev1-rest-api-coverage-php${{ matrix.php-version }}
          fail_ci_if_error: false

      - name: üì¶ Archive Coverage Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-php${{ matrix.php-version }}
          path: |
            helplinev1/rest_api/coverage-html/
            helplinev1/rest_api/coverage.xml
            helplinev1/rest_api/coverage-analysis.txt
            helplinev1/rest_api/test-summary.txt
            helplinev1/COVERAGE.md
            helplinev1/rest_api/test-results.xml
          retention-days: 30
          if-no-files-found: ignore

      - name: üì¶ Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-php${{ matrix.php-version }}
          path: helplinev1/rest_api/test-results.xml
          retention-days: 30
          if-no-files-found: ignore

  # Docker Build and Integration Tests
  build-and-test:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PHP image
        run: |
          docker build -t helpline-php helplinev1/docker/php

      - name: Build NGINX image
        run: |
          docker build -t helpline-nginx helplinev1/docker/nginx

      - name: Run Docker Compose
        working-directory: helplinev1
        run: |
          docker compose up -d

      - name: Wait for app to be ready
        run: sleep 20  # Allow containers to settle

      - name: Check web endpoint
        run: |
          curl -I http://localhost:8087 || echo "Web check failed"

      - name: Test API endpoints
        run: |
          echo "Testing REST API endpoints..."
          curl -f http://localhost:8087/api/ || echo "API endpoint test failed"
          
      - name: Run API Integration Tests
        working-directory: helplinev1/rest_api
        run: |
          if [ -f "./vendor/bin/phpunit" ]; then
            docker exec helpline-php-api ./vendor/bin/phpunit tests/Integration/ --verbose || echo "Integration tests not available"
          fi

      - name: Cleanup
        if: always()
        working-directory: helplinev1
        run: docker compose down

  ci-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, build-and-test]
    if: always()

    steps:
      - name: üìã CI/CD Summary
        run: |
          echo "## üéØ HelplineV1 CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Completed Jobs:" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Test: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.unit-tests.result }}" == "success" ] && [ "${{ needs.build-and-test.result }}" == "success" ]; then
            echo "### üéâ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "The HelplineV1 is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Some tests failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs and fix any issues." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage reports have been generated and uploaded as artifacts" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "- Coverage report committed to PR branch" >> $GITHUB_STEP_SUMMARY
            echo "- Access the coverage report at: [COVERAGE.md](https://github.com/${{ github.repository }}/blob/${{ github.head_ref }}/helplinev1/COVERAGE.md)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Coverage report available as artifact" >> $GITHUB_STEP_SUMMARY
          fi